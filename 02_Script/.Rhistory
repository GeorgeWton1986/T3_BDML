test_bbox_buffer <- st_bbox(test_buffer_aptos)
# Consulta a OSM para parques dentro del área del buffer
test_parques <- opq(bbox = test_bbox_buffer) %>%
add_osm_feature(key = "leisure", value = "park")
# Descargar los datos de parques de la consulta
test_parques_data <- osmdata_sf(test_parques)
# Extraer los polígonos de los parques (donde están los datos relevantes)
test_parques_sf <- test_parques_data$osm_polygons %>%
st_transform(crs = 4326)  # Asegurarse de que el CRS coincida
# Calcular las distancias a parques (puedes hacer lo mismo para avenidas o CAIs)
# Distancias a parques
test_dist_matrix_parques <- st_distance(test_chapinero_sf, test_parques_sf)
# Calcular distancia mínima a un parque
test_dist_min_parques <- apply(test_dist_matrix_parques, 1, min)
# Agregar la distancia mínima a un parque a la base test_aptos
test_chapinero <- test_chapinero %>%
mutate(distancia_parque = test_dist_min_parques)
# Verificar que la columna se agregó correctamente
head(test_chapinero)
View(test_chapinero_sf)
View(test_aptos_sf)
View(train_localidades)
# Columas númericas
train_aptos <- train_aptos %>%
mutate(lon = as.numeric(lon), lat = as.numeric(lat))
# Instalar y cargar el paquetes
if (!require("pacman")) install.packages("pacman")
library(pacman)
if (!require("MLmetrics")) install.packages("MLmetrics")
library(MLmetrics)
# Usar pacman para cargar (e instalar si es necesario) los paquetes
p_load(tidyverse,   # Manipulación y visualización de datos
dplyr,       # Manipulación de datos
ggplot2,     # Visualización de datos en gráficas
readr,       # Importación de datos
stargazer,   # Formato para tablas
utils,       # Lctura de archivos y manipulación de datos
skimr,       # Resumen estadístico
caret,       # Creación y validación de modelos predictivos
glmnet,      # Modelos de regresión penalizados (Ridge, Lasso)
xgboost,     # Implementación de Gradient Boosting
rpart,       # Árboles de decisión
rpart.plot,  # Visualización de árboles generados por rpart
pROC,        # Curvas ROC y métricas
Metrics,     # Métricas de evaluación
httr,        # Solicitudes http
rio,         # Facilidad para importar data
plotly,      # Gráficos interactivos
osmdata,     # Obtener información de open street maps
sf,          # Leer/escribir/manipular datos espaciales
leaflet,     # Mapas interactivos
gridExtra,   # Graficar en grid
tmaptools,   # Geocode_OMS()
geosphere   # Calcular distancias geográficas como Haversine
)
# 1. Carga de datos train
## Definir URL del archivo Excel en GitHub
url_excel_train <- "https://raw.githubusercontent.com/GeorgeWton1986/T3_BDML/refs/heads/main/03_Stores/train.csv"
## Descargar el archivo temporalmente
temp_file <- tempfile(fileext = ".csv")
GET(url_excel_train, write_disk(temp_file, overwrite = TRUE))
## Leer el archivo CSV en un dataframe
train_aptos <- read_csv(temp_file)
# 2. Carga de datos test hogares
## Definir URL del archivo Excel en GitHub
url_excel_test <- "https://raw.githubusercontent.com/GeorgeWton1986/T3_BDML/refs/heads/main/03_Stores/test.csv"
## Descargar el archivo temporalmente
temp_file <- tempfile(fileext = ".csv")
GET(url_excel_test, write_disk(temp_file, overwrite = TRUE))
# Leer el archivo CSV en un dataframe
test_aptos <- read_csv(temp_file)
# Nombre de las columnas de la base train_hogares
colnames(train_aptos)
# Seleccion de la columnas id de hogares
train_aptos %>%
select(property_id) %>%
head()
# Resumen de apartamentos de la base train_hogares
skim(train_aptos)
# Tratamiento de missing values
train_miss <- skim(train_aptos) %>%
filter(skim_type == "numeric") %>%
select(skim_variable, n_missing)
nobs_train <- nrow(train_aptos)
# Porcentaje de missing por cada caracteristica
train_aptos_miss<- train_miss %>%
mutate(p_missing= n_missing/nobs_train) %>%
filter(n_missing!= 0) %>%
arrange(-n_missing)
train_aptos_miss
# Visualizar variables con missing values
## Gráfico para surface_total (área total)
graf_ms1 <- ggplot(train_aptos, aes(surface_total)) +
geom_histogram(color = "#000000", fill = "#0099F8") +
geom_vline(xintercept = median(train_aptos$surface_total, na.rm = TRUE), linetype = "dashed", color = "red") +
geom_vline(xintercept = mean(train_aptos$surface_total, na.rm = TRUE), linetype = "dashed", color = "blue") +
ggtitle("GRÁFICA 1 - Área total") +
theme_bw() +
theme(plot.title = element_text(size = 18))
ggsave("../04_Views/GRAFICO1-HISTOGRAMA-AREATOTAL.png", plot = graf_ms1, dpi = 150, width = 8, height = 6)
## Gráfico para surface_covered (área privada)
graf_ms2 <- ggplot(train_aptos, aes(surface_covered)) +
geom_histogram(color = "#000000", fill = "#0099F8") +
geom_vline(xintercept = median(train_aptos$surface_covered, na.rm = TRUE), linetype = "dashed", color = "red") +
geom_vline(xintercept = mean(train_aptos$surface_covered, na.rm = TRUE), linetype = "dashed", color = "blue") +
ggtitle("GRÁFICA 2 - Área privada") +
theme_bw() +
theme(plot.title = element_text(size = 18))
ggsave("../04_Views/GRAFICO2-HISTOGRAMA-AREAPRIVADA.png", plot = graf_ms2, dpi = 150, width = 8, height = 6)
## Gráfico para rooms (habitaciones)
graf_ms3 <- ggplot(train_aptos, aes(rooms)) +
geom_histogram(color = "#000000", fill = "#0099F8") +
geom_vline(xintercept = median(train_aptos$rooms, na.rm = TRUE), linetype = "dashed", color = "red") +
geom_vline(xintercept = mean(train_aptos$rooms, na.rm = TRUE), linetype = "dashed", color = "blue") +
ggtitle("GRÁFICA 3 -Habitaciones") +
theme_bw() +
theme(plot.title = element_text(size = 18))
ggsave("../04_Views/GRAFICO3-HISTOGRAMA-HABITACIONES.png", plot = graf_ms3, dpi = 150, width = 8, height = 6)
## Gráfico para bathrooms (baños)
graf_ms4 <- ggplot(train_aptos, aes(bathrooms)) +
geom_histogram(color = "#000000", fill = "#0099F8") +
geom_vline(xintercept = median(train_aptos$bathrooms, na.rm = TRUE), linetype = "dashed", color = "red") +
geom_vline(xintercept = mean(train_aptos$bathrooms, na.rm = TRUE), linetype = "dashed", color = "blue") +
ggtitle("GRÁFICA 4 - Baños") +
theme_bw() +
theme(plot.title = element_text(size = 18))
ggsave("../04_Views/GRAFICO4-HISTOGRAMA-BAÑOS.png", plot = graf_ms4, dpi = 150, width = 8, height = 6)
# Imputación de variables con la mediana y moda
## 1. Variable surface_total con mediana
mediana_surface_total <- median(train_aptos$surface_total, na.rm = TRUE)
train_aptos <- train_aptos  %>%
mutate(surface_total = ifelse(is.na(surface_total) == TRUE, mediana_surface_total, surface_total))
## 2. Variable surface_covered con mediana
mediana_surface_covered <- median(train_aptos$surface_covered, na.rm = TRUE)
train_aptos <- train_aptos  %>%
mutate(surface_covered = ifelse(is.na(surface_covered) == TRUE, mediana_surface_covered, surface_covered))
## 3.  Variable rooms con la moda
moda_rooms <- train_aptos %>%
filter(!is.na(rooms)) %>%
count(rooms) %>%
arrange(desc(n)) %>%
slice(1) %>%
pull(rooms)
train_aptos <- train_aptos  %>%
mutate(rooms = ifelse(is.na(rooms) == TRUE, moda_rooms, rooms))
## 4.Variable bathrooms con la moda
moda_bathrooms <- train_aptos %>%
filter(!is.na(bathrooms)) %>%
count(bathrooms) %>%
arrange(desc(n)) %>%
slice(1) %>%
pull(bathrooms)
train_aptos <- train_aptos  %>%
mutate(bathrooms = ifelse(is.na(bathrooms) == TRUE, moda_bathrooms, bathrooms))
# Validación de correcta imputación de missing values en variables numéricas
skim(train_aptos)
train_aptos <- as.data.frame(train_aptos)
stargazer(train_aptos, type = "text")
# Calcular el precio por metro cuadrado
train_aptos <- train_aptos %>%
mutate(precio_mt2 = round(price / surface_total, 0))
skim(train_aptos)
# Histograma del precio por metro cuadrado
graf_5 <- ggplot(train_aptos, aes(precio_mt2)) +
geom_histogram(color = "#000000", fill = "#0099F8") +
ggtitle("GRÁFICA 4 - Precio por metro cuadrado (millones)") +
scale_x_continuous(labels = function(x) x / 1e6) +
theme_bw() +
theme(plot.title = element_text(size = 18))
ggsave("../04_Views/GRAFICO5-HISTOGRAMA-PRECIOXMETROCUADRADO.png", plot = graf_5, dpi = 150, width = 8, height = 6)
# Box plot del precio por metro cuadrado
graf_6 <- train_aptos %>%
ggplot(aes(y = precio_mt2)) +
geom_boxplot(fill = "darkblue", alpha = 0.4) +
labs(
title = "Muestra completa",
y = "Precio por metro cuadrado (millones)", x = "") +
scale_y_continuous(labels = function(x) x / 1e6) +
theme_bw()
ggsave("../04_Views/GRAFICO6-BOXPLOT-PRECIOXMETROCUADRADO.png", plot = graf_6, dpi = 150, width = 8, height = 6)
# Ante outliers superiores se aplica la Metodología de percentil 99%
#p1 <- quantile(train_aptos$precio_mt2, probs = 0.01, na.rm = TRUE)
p99 <- quantile(train_aptos$precio_mt2, probs = 0.99, na.rm = TRUE)
train_aptos <- train_aptos %>%
filter(precio_mt2 <= p99)
# Filtrar solo los valores menores o iguales al límite superior
graf_7 <- train_aptos %>%
ggplot(aes(y = precio_mt2)) +
geom_boxplot(fill = "darkblue", alpha = 0.4) +
labs(
title = "Muestra filtrada - P99",
y = "Precio por metro cuadrado (millones)", x = "") +
scale_y_continuous(labels = function(x) x / 1e6) +
theme_bw()
ggsave("../04_Views/GRAFICO6-BOXPLOT-PRECIOXMETROCUADRADO-P99.png", plot = graf_7, dpi = 150, width = 8, height = 6)
# Observamos la primera visualización de la ubicación de los inmubles de la base train_aptos
leaflet() %>%
addTiles() %>%
addCircles(lng = train_aptos$lon,
lat = train_aptos$lat)
# Columas númericas
train_aptos <- train_aptos %>%
mutate(lon = as.numeric(lon), lat = as.numeric(lat))
# Convertir las coordenadas de los apartamentos a un objeto espacial (sf)
train_aptos_sf_gral <- st_as_sf(train_aptos, coords = c("lon", "lat"), crs = 4326)
# Transformar a un sistema de coordenadas proyectado para Colombia (MAGNA-SIRGAS / Colombia Bogota zone)
#¡¡¡IMPORTANTE!!!!
train_aptos_sf <- st_transform(train_aptos_sf_gral, 3116)
print(train_aptos_sf)
limites <- getbb("Chapinero, Bogotá, Colombia")
# Las coordenadas en EPSG:4326
train_aptos_sf <- st_as_sf(train_aptos, coords = c("lon", "lat"), crs = 4326)
# Filtrar límites sin chapinero
train_localidades <- train_aptos %>%
filter(
lon < limites[1, "min"] | lon > limites[1, "max"] |
lat < limites[2, "min"] | lat > limites[2, "max"]
)
# Visualizar
leaflet() %>%
addTiles() %>%
addCircles(lng = train_localidades$lon,
lat = train_localidades$lat)
# Columas númericas
train_aptos <- train_aptos %>%
mutate(lon = as.numeric(lon), lat = as.numeric(lat))
# Convertir las coordenadas de los apartamentos a un objeto espacial (sf)
train_aptos_sf <- st_as_sf(train_aptos,
coords = c("lon", "lat"),
crs = 4326)
print(train_aptos_sf)
# Columas númericas
train_aptos <- train_aptos %>%
mutate(lon = as.numeric(lon), lat = as.numeric(lat))
limites <- getbb("Chapinero, Bogotá, Colombia")
# Las coordenadas en EPSG:4326
train_aptos_sf <- st_as_sf(train_aptos,
coords = c("lon", "lat"),
crs = 4326)
# Filtrar límites sin chapinero
train_localidades <- train_aptos %>%
filter(
lon < limites[1, "min"] | lon > limites[1, "max"] |
lat < limites[2, "min"] | lat > limites[2, "max"]
)
# Visualizar
leaflet() %>%
addTiles() %>%
addCircles(lng = train_localidades$lon,
lat = train_localidades$lat)
# Ahora solo nos quedaremos con las observaciones que efectivamente están dentro de Chapinero y no están mal georeferenciadas
limites <- getbb("Chapinero, Bogotá, Colombia")
limites
train_chapinero <- train_aptos %>%
filter(
between(lon, limites[1, "min"], limites[1, "max"]) &
between(lat, limites[2, "min"], limites[2, "max"])
)
leaflet() %>%
addTiles() %>%
addCircles(lng = train_chapinero$lon,
lat = train_chapinero$lat)
library(tidytext)
library(dplyr)
# Tokenización de la columna 'description'
train_localidades_tokens <- train_localidades %>%
unnest_tokens(word, description)
#Quitar stop words
data("stop_words")
train_localidades_tokens_clean <- train_localidades_tokens %>%
anti_join(stop_words)
train_localidades_tokens_clean %>%
count(word, sort = TRUE)
library(dplyr)
#Vector palabras agrupadas
parking <- c("parqueadero", "garaje", "parqueaderos", "garajes")
terrace <- c("terraza", "balcon")
gym <- "gimnasio"
laundry <- "lavanderia"
elevator <- "ascensor"
#Variable dummy para cada caracteristica
dummies_df <- train_localidades_tokens_clean %>%
mutate(binaria_parking = word %in% parking,
binaria_terrace = word %in% terrace,
binaria_gym = word %in% gym,
binaria_laundry = word %in% laundry,
binaria_elevator = word %in% elevator) %>%
group_by(property_id) %>%
summarise(across(starts_with("binaria_"), ~as.integer(any(.))))
# Unir a df
train_localidades <- left_join(train_localidades, dummies_df, by = "property_id")
train_localidades_sf <- st_as_sf(train_localidades,
coords = c("lon", "lat"),
crs = 4326)
# Obtener los límites de Bogotá
limites_bogota <- getbb("Bogotá, Colombia")
parques_bogota <- opq(bbox = limites_bogota) %>%
add_osm_feature(key = "leisure",
value = "park")
# Descargar datos de parques
parques_data_bogota <- osmdata_sf(parques_bogota)
# Extraer los puntos de los parques en Bogotá como un objeto sf
parques_sf_bogota <- parques_data_bogota$osm_points %>%
dplyr::select(osm_id, name) %>%
st_transform(crs = 4326)  # Asegurarse de que el CRS coincida con el de los apartamentos
# Revisar los datos de los CAIs
head(parques_sf_bogota)
View(parques_sf_bogota)
View(parques_sf_bogota)
# Localidades - Transformar a un sistema de coordenadas proyectado para Colombia
train_localidades_metros <- st_transform(train_localidades,
crs = 3116)
# Columas númericas
train_aptos <- train_aptos %>%
mutate(lon = as.numeric(lon), lat = as.numeric(lat))
limite_chapinero <- getbb("Chapinero, Bogotá, Colombia")
# Las coordenadas en EPSG:4326
train_aptos_sf <- st_as_sf(train_aptos,
coords = c("lon", "lat"),
crs = 4326)
# Filtrar límites sin chapinero
train_localidades <- train_aptos %>%
filter(
lon < limite_chapinero[1, "min"] | lon > limite_chapinero[1, "max"] |
lat < limite_chapinero[2, "min"] | lat > limite_chapinero[2, "max"]
)
#Train_localicadades NO incluye chapinero
train_localidades_sf <- st_as_sf(train_localidades,
coords = c("lon", "lat"),
crs = 4326)
# Visualizar
leaflet() %>%
addTiles() %>%
addCircles(lng = train_localidades$lon,
lat = train_localidades$lat)
# Localidades - Transformar a un sistema de coordenadas proyectado para Colombia
train_localidades_metros <- st_transform(train_localidades_sf,
crs = 3116)
print(train_localidades_metros)
# Parques - Transformar a un sistema de coordenadas proyectado para Colombia
train_parques_metros <- st_transform(parques_sf_bogota,
crs = 3116)
print(train_parques_metros)
# Calcular las distancias entre los apartamentos y los parques
dist_matrix_parques <- st_distance(train_localidades_metros, train_parques_metros)
# Localidades - Transformar a un sistema de coordenadas proyectado para Colombia
train_localidades_metros <- st_transform(train_localidades_sf,
crs = 3116)
print(train_localidades_metros)
# Parques - Transformar a un sistema de coordenadas proyectado para Colombia
train_parques_metros <- st_transform(parques_sf_bogota,
crs = 3116)
print(train_parques_metros)
#Crear un buffer de 500 m alrededor de cada apartamento
train_buffer_localidades <- st_buffer(train_localidades_metros, dist = 500)
# Hacer una intersección entre los parques y el buffer de 500 m
train_interseccion_parques <- st_intersection(train_parques_metros, train_buffer_localidades)
# Calcular las distancias entre los apartamentos y los parques
dist_matrix_parques <- st_distance(train_buffer_localidades, train_interseccion_parques)
#¡¡¡IMPORTANTE!!!!
#(MAGNA-SIRGAS / Colombia Bogota)
# Localidades - Transformar a un sistema de coordenadas proyectado para Colombia
train_localidades_metros <- st_transform(train_localidades_sf,
crs = 3116)
print(train_localidades_metros)
# Parques - Transformar a un sistema de coordenadas proyectado para Colombia
train_parques_metros <- st_transform(parques_sf_bogota,
crs = 3116)
print(train_parques_metros)
#Crear un buffer de 500 m alrededor de cada apartamento
train_buffer_localidades <- st_buffer(train_localidades_metros, dist = 500)
# Crear buffer de 500 m por apartamento (ya lo tienes)
train_buffer_localidades <- st_buffer(train_localidades_metros, dist = 500)
# Asignar IDs únicos a apartamentos
train_buffer_localidades$apt_id <- 1:nrow(train_buffer_localidades)
# Realizar un join espacial: parques dentro del buffer de cada apartamento
parques_cercanos <- st_join(train_parques_metros, train_buffer_localidades, join = st_within)
# Eliminar filas sin match (es decir, sin parques dentro del buffer)
parques_cercanos <- parques_cercanos %>% filter(!is.na(apt_id))
# Calcular distancias solo entre parques y su apartamento asociado
# Primero, extraer geometría del apartamento correspondiente
get_min_distance <- function(apt_id) {
apt_geom <- train_localidades_metros[apt_id, ]
parques <- parques_cercanos %>% filter(apt_id == !!apt_id)
if (nrow(parques) == 0) {
return(NA)
}
dists <- st_distance(apt_geom, parques)
return(min(dists))
}
# Aplicar función para cada apartamento
train_localidades_metros$distancia_parque <- sapply(train_buffer_localidades$apt_id, get_min_distance)
# Obtener los límites de Bogotá
limites_bogota <- getbb("Bogotá, Colombia")
mall_bogota <- opq(bbox = limites_bogota) %>%
add_osm_feature(key = "shop",
value = "mall")
# Descargar datos de parques
mall_data_bogota <- osmdata_sf(mall_bogota)
# Extraer los puntos de los parques en Bogotá como un objeto sf
mall_sf_bogota <- mall_data_bogota$osm_points %>%
dplyr::select(osm_id, name) %>%
st_transform(crs = 4326)  # Asegurarse de que el CRS coincida con el de los apartamentos
# Revisar los datos de los parques
head(mall_sf_bogota)
# Localidades - Transformar a un sistema de coordenadas proyectado para Colombia
train_localidades_metros <- st_transform(train_localidades_sf,
crs = 3116)
print(train_localidades_metros)
# Parques - Transformar a un sistema de coordenadas proyectado para Colombia
train_mall_metros <- st_transform(mall_sf_bogota,
crs = 3116)
print(train_mall_metros)
# Calcular las distancias entre los apartamentos y los parques
dist_matrix_mall <- st_distance(train_buffer_localidades, train_mall_metros)
Localidades - Transformar a un sistema de coordenadas proyectado para Colombia
# Obtener los límites de Bogotá
limites_bogota <- getbb("Bogotá, Colombia")
mall_bogota <- opq(bbox = limites_bogota) %>%
add_osm_feature(key = "shop",
value = "mall")
# Descargar datos de parques
mall_data_bogota <- osmdata_sf(mall_bogota)
# Extraer los puntos de los parques en Bogotá como un objeto sf
mall_sf_bogota <- mall_data_bogota$osm_points %>%
dplyr::select(osm_id, name) %>%
st_transform(crs = 4326)  # Asegurarse de que el CRS coincida con el de los apartamentos
# Revisar los datos de los parques
head(mall_sf_bogota)
#¡¡¡IMPORTANTE!!!!
#(MAGNA-SIRGAS / Colombia Bogota)
# Localidades - Transformar a un sistema de coordenadas proyectado para Colombia
train_localidades_metros <- st_transform(train_localidades_sf,
crs = 3116)
print(train_localidades_metros)
# Parques - Transformar a un sistema de coordenadas proyectado para Colombia
train_mall_metros <- st_transform(mall_sf_bogota,
crs = 3116)
print(train_mall_metros)
# Calcular las distancias entre los apartamentos y los parques
dist_matrix_mall <- st_distance(train_localidades_metros, train_mall_metros)
# Calcular la distancia mínima a un parque para cada apartamento
dist_min_mall <- apply(dist_matrix_mall, 1, min)
# Agregar la distancia mínima a la base de datos train_localidades
train_localidades_metros$distancia_mall <- as.numeric(dist_min_mall)
View(train_localidades_metros)
View(train_localidades)
# Agregar la distancia mínima a la base de datos
train_localidades <- train_localidades %>%
mutate(distancia_mall = dist_min_mall)
# Revisar resultados
head(train_localidades)
# Crear histograma
p2 <- ggplot(train_localidades, aes(x = distancia_parque)) +
geom_histogram(bins = 50, fill = "darkgreen", alpha = 0.5) +
labs(x = "Distancia mínima a un parque (m)", y = "Cantidad",
title = "Distribución de distancia a parques - resto de Bogotá") +
theme_bw()
ggsave("../04_Views/GRAFICO8B-DISTANCIAPARQUES_RESTO.png", plot = p2, dpi = 150, width = 8, height = 6)
# Crear histograma
p2 <- ggplot(train_localidades, aes(x = distancia_mall)) +
geom_histogram(bins = 50, fill = "darkgreen", alpha = 0.5) +
labs(x = "Distancia mínima hasta el Mall(m)", y = "Cantidad",
title = "Distribución de distancia a Mall - resto de Bogotá") +
theme_bw()
ggsave("../04_Views/GRAFICO8B-DISTANCIAMALL_RESTO.png", plot = p2, dpi = 150, width = 8, height = 6)
# Obtener los CAIs (estaciones de policía) en Bogotá desde OSM
cai_query_bogota <- opq(bbox = limites_bogota) %>%
add_osm_feature(key = "amenity", value = "police")
# Descargar datos de Cai
cai_data_bogota <- osmdata_sf(cai_bogota)
# Obtener los CAIs (estaciones de policía) en Bogotá desde OSM
cai_bogota <- opq(bbox = limites_bogota) %>%
add_osm_feature(key = "amenity", value = "police")
# Descargar datos de Cai
cai_data_bogota <- osmdata_sf(cai_bogota)
# Extraer los puntos de los parques en Bogotá como un objeto sf
cai_sf_bogota <- cai_data_bogota$osm_points %>%
dplyr::select(osm_id, name) %>%
st_transform(crs = 4326)  # Asegurarse de que el CRS coincida con el de los apartamentos
# Revisar los datos de los parques
head(cai_sf_bogota)
#¡¡¡IMPORTANTE!!!!
#(MAGNA-SIRGAS / Colombia Bogota)
# Localidades - Transformar a un sistema de coordenadas proyectado para Colombia
train_localidades_metros <- st_transform(train_localidades_sf,
crs = 3116)
print(train_localidades_metros)
# Parques - Transformar a un sistema de coordenadas proyectado para Colombia
train_cai_metros <- st_transform(cai_sf_bogota,
crs = 3116)
print(train_cai_metros)
# Calcular las distancias entre los apartamentos y los parques
dist_matrix_cai <- st_distance(train_localidades_metros, train_cai_metros)
# Calcular la distancia mínima a un parque para cada apartamento
dist_min_cai <- apply(dist_matrix_cai, 1, min)
# Agregar la distancia mínima a la base de datos train_localidades
train_localidades_metros$distancia_cai <- as.numeric(dist_min_cai)
# Agregar la distancia mínima a la base de datos
train_localidades <- train_localidades %>%
mutate(distancia_cai = dist_min_cai)
# Revisar resultados
head(train_localidades)
View(train_localidades)
# Visualizar las distancias a los CAI
ggplot(train_localidades, aes(x = distancia_cai)) +
geom_histogram(bins = 50, fill = "darkred", alpha = 0.5) +
labs(x = "Distancia mínima a un CAI (m)", y = "Cantidad",
title = "Distribución de la distancia a los CAI en el resto de Bogotá") +
theme_bw()
# Guardar el gráfico
ggsave("../04_Views/GRAFICO8C-DISTANCIACAI_RESTO.png", dpi = 150, width = 8, height = 6)
